name: "Build a Forge project and cache the artifacts and the dependencies"

on:
  workflow_call:
    inputs:
      cache-path:
        default: |
          cache
          node_modules
          out
          out-optimized
        required: false
        type: "string"

      foundry-profiles:
        default: |
          optimized
          test-optimized
        description: "Foundry profiles for which to build the contracts, end line-separated"
        required: false
        type: "string"

    outputs:
      # See https://github.com/actions/cache/issues/1566
      cache-status:
        description: "Descriptive cache status: 'primary', 'fallback', or 'not-found'"
        value: ${{ jobs.forge-build.outputs.cache-status }}

jobs:
  forge-build:
    runs-on: "ubuntu-latest"
    outputs:
      cache-status: ${{ steps.cache-step.outputs.cache-status }}
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      # If a cache is found for the primary key, the cache is restored. Otherwise, a new cache is created.
      - name: "Cache Foundry artifacts and Node.js dependencies"
        id: "cache-step"
        uses: "sablier-labs/reusable-workflows/.github/actions/cache@ci/proper-cache"
        with:
          cache-path: ${{ inputs.cache-path }}

      - name: "Install Bun"
        uses: "oven-sh/setup-bun@v2"
        with:
          bun-version: "latest"

      - name: "Install the Node.js dependencies"
        run: "bun install --frozen-lockfile"

      - name: "Show the Forge config"
        run: "forge config"

      - name: "Build contracts with the specified profiles"
        run: | # shell
          echo "${{ inputs.foundry-profiles }}" | while read profile; do
            if [ -n "$profile" ]; then
              echo "Building with profile: $profile"
              FOUNDRY_PROFILE=$profile forge build
            fi
          done

      - name: "Add summary"
        run: | # shell
          echo "## Forge Build result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY
