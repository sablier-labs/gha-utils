name: "Measure test coverage for a Forge project"

on:
  workflow_call:
    inputs:
      cache-path:
        default: |
          cache
          node_modules
          out
          out-optimized
        required: false
        type: "string"

      match-path:
        required: true
        type: "string"

      restore-cache:
        default: true
        required: false
        type: "boolean"

      # This flag allows coverage with via-ir enabled for the "minimum amount of optimization" necessary.
      via-ir-minimum:
        default: false
        required: false
        type: "boolean"

    secrets:
      CODECOV_TOKEN:
        required: true
      MAINNET_RPC_URL:
        required: false

jobs:
  forge-coverage:
    env:
      MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"

      - name: "Check for file changes"
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            solidity:
              - "src/**"
              - "tests/**"
              - "foundry.toml"
              - "package.json"

      - name: "Install Foundry"
        if: steps.filter.outputs.solidity == 'true'
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Restore the cached build and node modules"
        if: ${{ inputs.restore-cache && steps.filter.outputs.solidity == 'true' }}
        uses: "actions/cache/restore@v4"
        with:
          fail-on-cache-miss: true
          key: "build-and-modules-${{ github.sha }}"
          path: ${{ inputs.cache-path }}

      - name: "Generate the coverage report"
        if: steps.filter.outputs.solidity == 'true'
        run: |
          if [ "${{ inputs.via-ir-minimum }}" == "true" ]; then
            forge coverage --match-path "${{ inputs.match-path }}" --report lcov --ir-minimum
          else
            forge coverage --match-path "${{ inputs.match-path }}" --report lcov
          fi

      - name: "Upload coverage report to Codecov"
        if: steps.filter.outputs.solidity == 'true'
        uses: "codecov/codecov-action@v4"
        with:
          files: "./lcov.info"
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: "Add summary"
        run: | # shell
          echo "## Forge Coverage result" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
